Welbex API documentation


Registration:

API: '/api/users/'
Method: POST
Request: {
	username: string,
	password: string
}
Response on success: {
	status: 201,
	token: string,
	username: string
}
Response on missing content: {
	status: 400,
	error: 'missing content'
},
Response on short password: {
	status: 400,
	error: 'password must be at least 3 letters long'
}


Login:

API: '/api/login'
Method: POST
Request: {
	username: string,
	password: string
}
Response on success: {
	status: 200,
	token: string,
	username: string
}
Response on invalid username or password: {
	status: 401,
	error: 'invalid username or password'
}


Blogs:

API: '/api/blogs/:page'
Method: GET
Response on success: {
	blogs: [
		{
			dateAdded: string,
			id: string,
			user: {
				id: string,
				username: string
			},
			blogPost: [
				{
					type: string,
					content: string
				},
				...
			]
		},
		...
	],
	pages: number
}

API: '/api/blogs/username/:username'
Method: GET
Response on success: [
	{
		dateAdded: string,
		id: string,
		user: {
			id: string,
			username: string
		},
		blogPost: [
			{
				type: string,
				content: string
			},
			...
		]
	}
]

API: '/api/blogs/id/:id'
Method: GET
Response on success: [
	{
		dateAdded: string,
		id: string,
		user: {
			id: string,
			username: string
		},
		blogPost: [
			{
				type: string,
				content: string
			},
			...
		]
	}
],
Response on blog not found: {
	status: 400
}

API: '/api/blogs/'
Method: POST
Request: {
	headers: {
		Authorization: 'Bearer <token>'
	},
	body: [
		{
			type: string,
			content: string
		},
		...
	]
}
Response on success: {
	status: 201,
	data: {
		dateAdded: string,
		id: string,
		user: string,
		blogPost: [
			{
				type: string,
				content: string
			},
			...
		]
	}
},
Response on empty blog: {
	status: 400
},
Response on failed token validation: {
	status: 401,
	error: 'token invalid'
}

API: '/api/blogs/:id'
Method: DELETE
Request: {
	headers: {
		Authorization: 'Bearer <token>'
	}
}
Response on success: {
	status: 204
},
Response on failed token validation: {
	status: 401,
	error: 'token invalid'
}

API: '/api/blogs/:id'
Method: PUT
Request: {
	headers: {
		Authorization: 'Bearer <token>'
	},
	body: {
		blogPost: [
			{
				type: string,
				content: string
			},
			...
		],
		dateAdded: string
	}
}
Response on success: {
	status: 204
},
Response on failed token validation: {
	status: 401,
	error: 'token invalid'
}